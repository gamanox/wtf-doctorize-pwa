openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin
# Added by API Auto Mocking Plugin

# Added by API Auto Mocking Plugin
  - description: Doctorize API
    url: http://api.mydoctorize.com/
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/we-the-force/doctorize/1.0.0



info:
  description: Endpoints for Doctorize API
  version: 1.0.0
  title: Doctorize API
  contact:
    email: will.alvarez@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: account
    description: Basic account operations
  - name: users
    description: Users operations
  - name: appointments
    description: Appointments search and
paths:

  /doctors:
    post:
      tags: 
        - doctors
      summary: Create a doctor
      operationId: addDoctor
      description: Creates a doctor
      responses: 
        200:
          description: doctor created
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCreated'
        400:
          description: bad input parameter
        409:
          description: the doctor already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
        description: Doctor to add 

  /doctors/{id}:
    get:
      tags:
        - doctors
      description: return the details of a doctor
      summary: search a doctor
      operationId: searchDoctor
      parameters:
        - in: path
          name: id
          required:  true
          description: Doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: search results matching criteria
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Doctor'
        400:
          description: bad input parameter
    delete:
      tags:
        - doctors
      description: delete a doctor
      summary: delete a doctor
      operationId: deleteDoctor
      parameters:
        - in: path
          name: id
          description: Doctor id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: doctor deleted successfully
        400:
          description: Invalid doctor id
        404:
          description: doctor not found
    patch:
      tags:
        - doctors
      description: edit doctor info
      summary: edit doctor info
      operationId: editDoctor
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: doctor Details Updated
        400:
          description: bad input parameter
        404:
          description: doctor not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
        description: edit a doctor
              
        
  /doctors/{id}/offices:
    get:  
      tags:
        - doctors
          - offices
      description: List doctor's offices
      summary: List doctor's offices
      operationId: showOffices
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: List of doctor's offices
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Office'
        400:
          description: bad input parameters
        404:
          description: Officess not found
    post:
      tags:
        - doctors
          - offices
      description: Create a doctor's office
      summary: Create a doctor's office
      operationId: addOffices
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: office created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
        400:
          description: bad input parameter
        409:
          description: office already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
        description: Office to add 

  /doctors/{id}/offices/{officeId}:
    get:
      tags:
        - doctors
          - offices
      description: return the details of an office
      summary: Search an office
      operationId: searchOffice
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: officeId
          required: true
          description: office id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: search results matching criteria
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Office'
        400:
          description: bad input parameter
    delete:
      tags:
        - doctors
          - offices
      description: delete an office
      summary: delete an office
      operationId: deleteOffice
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: officeId
          required: true
          description: office id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: office deleted successfully
        400:
          description: Invalid parameters
        404:
          description: office not found    
    patch:
      tags:
        - doctors
          - offices
      description: edit office info
      summary: edit office info
      operationId: editOffice
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: officeId
          required: true
          description: office id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: office Details Updated
        400:
          description: bad input parameter
        404:
          description: office not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'
        description: edit office

  /doctors/{id}/appoinments:
    get:
      tags:
        - doctors
          - appointments
      description: List doctor's appointments
      summary: List doctor's appointments
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: List of doctor's appointments
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        400:
          description: bad input parameters
        404:
          description: appointments not found
    post:
      tags:
        - doctors
          - appointments
      description: Create a doctor's appointments
      summary: Create a doctor's appointments
      operationId: addAppointment
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: appointment created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: bad input parameter
        409:
          description: office already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
        description: appointment to add 
        
  
  /doctors/{id}/appoinments/{appointmentId}:
    get:
      tags:
        - doctors
          - appointments
      description: return details of an appointment
      summary: search an appointment
      operationId: searchAppointment
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: appointmentId
          required: true
          description: appointment id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: search results matching criteria
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        400:
          description: bad input parameter
    delete:
      tags:
        - doctors
          - appointments
      description: delete an appointment
      summary: delete an appointment
      operationId: deleteAppointment
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: officeId
          required: true
          description: appointment id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: appointment deleted successfully
        400:
          description: Invalid parameters
        404:
          description: appointment not found   
    patch:
      tags:
        - doctors
          - appointments
      description: edit appointment info
      summary: edit appointment info
      operationId: editAppointment
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: officeId
          required: true
          description: appointment id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: appointment Details Updated
        400:
          description: bad input parameter
        404:
          description: appointment not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
        description: edit appointment 

  /doctors/{id}/patients:
    get:
      tags:
        - doctors
          - patients
      description: List doctor's patients
      summary: List doctor's patients
      operationId: listPatients
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: List of doctor's patients
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        400:
          description: bad input parameters
        404:
          description: patients not found
    post:
      tags:
        - doctors
          - patients
      description: Create a doctor's patient
      summary: Create a doctor's patient
      operationId: addPatient
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: patient created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        400:
          description: bad input parameter
        409:
          description: patient already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
        description: patient to add 
             
  /doctors/{id}/patients/{patientId}:
    get:
      tags:
        - doctors
          - patients
      description: return details of a patient
      summary: search a patient
      operationId: searchPatient
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: patientId
          required: true
          description: patient id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: search results matching criteria
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        400:
          description: bad input parameter
    delete:
      tags:
        - doctors
          - patients
      description: delete an patient
      summary: delete an patients
      operationId: deletePatient
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: patientId
          required: true
          description: patients id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: patient deleted successfully
        400:
          description: Invalid parameters
        404:
          description: patient not found 
    patch:
      tags:
        - doctors
          - patients
      description: edit patient info
      summary: edit patient info
      operationId: editPatient
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: patientId
          required: true
          description: patient id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: patient Details Updated
        400:
          description: bad input parameter
        404:
          description: patient not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
        description: edit patient 

  /doctors/{id}/assistants:
    get:
      tags:
        - doctors
          - assistants
      description: List doctor's assistants
      summary: List doctor's assistants
      operationId: listAssistants
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: List of doctor's assistants
          content: 
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assistant'
        400:
          description: bad input parameters
        404:
          description: assistants not found
    post:
      tags:
        - doctors
          - assistants
      description: Create a doctor's assistant
      summary: Create a doctor's assistant
      operationId: addAssistant
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: patient created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Assistant'
        400:
          description: bad input parameter
        409:
          description: assistant already exists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assistant'
        description: Assistant to add
         
  /doctors/{id}/assistants/{assistantId}:
    get:
      tags:
        - doctors
          - assistants
      description: return details of an assistant
      summary: search an assistant
      operationId: searchAssistant
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: assistantId
          required: true
          description: assistant id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: search results matching criteria
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/Assistant'
        400:
          description: bad input parameter
    delete:
      tags:
        - doctors
          - assistants
      description: delete an assistant
      summary: delete an assistant
      operationId: deleteAssistant
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: assistantId
          required: true
          description: assistant id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: assistant deleted successfully
        400:
          description: Invalid parameters
        404:
          description: assistant not found 
    patch:
      tags:
        - doctors
          - assistants
      description: edit assistant info
      summary: edit assistant info
      operationId: editAssistant
      parameters:
        - in: path
          name: id
          required: true
          description: doctor id
          schema:
            type: integer
            format: int64
        - in: path
          name: assistantId
          required: true
          description: assistant id
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: assistant Details Updated
        400:
          description: bad input parameter
        404:
          description: assistant not found
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assistant'
        description: edit assistant 

  /account/login:
    post:
      tags:
        - account
      summary: account login
      operationId: accountLogin
      description: Recover user's password with email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountLogin'
            example:
              email: 'will.alvarez@gmail.com'
              password: '****'
      responses:
        '200':
          description: Account Login Succesfuly

        '400':
          description: bad input parameter
  /account/logout:
    post:
      tags:
        - account
      summary: account logout
      operationId: accountLogout
      description: Close user session


      responses:
        '200':
          description: Account Logout Successfully

        '400':
          description: bad input parameter
  /account/confirmation:
    post:
      tags:
        - account
      summary: confirma account creation
      operationId: accountConfirmation
      description: Confirm account creation

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountConfirmation'
            example:
              email: 'will.alvarez@gmail.com'
              code: 'hxr1s9'
      responses:
        '200':
          description: Account confirmation successfully
        '400':
          description: Account confirmation failed
  /account/confirmationAssistant:
    post:
      tags:
        - assistant
      summary: confirma account creation
      operationId: accountConfirmationAssistant
      description: Confirm account creation

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountConfirmationAssistant'
            example:
              email: cristof_tb@hotmail.com
              code: p98typ
              name: Asistente de prueba
              password: Torres2015
              imageData: Base64

      responses:
        '200':
          description: Account confirmation successfully
        '400':
          description: Account confirmation failed
  /account/password/reset:
    post:
      tags:
        - account
      summary: recover password
      operationId: passwordRecovery
      description: Recover user's password with email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPasswordReset'
            example:
              email: will.alvarez@gmail.com
      responses:
        '200':
          description: Recovered Password

        '400':
          description: bad input parameter
  /account/password/confirmation:
    post:
      tags:
        - account
      summary: account login
      operationId: accountPasswordConfirmation
      description: Recover user's password with email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPasswordConfirmation'
            example:
              email: 'will.alvarez@gmail.com'
              password: '****'
              confirmPassword: '****'
              code: 'h3456'
      responses:
        '200':
          description: Account Login Succesfuly

        '400':
          description: bad input parameter
  /user/{id}:
    get:
      tags:
        - users
      summary: searches users
      operationId: userList
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserShow'
        '400':
          description: bad input parameter
  /user/save:
    post:
      tags:
        - users
      summary: create an user
      operationId: addUser
      description: Creates an user
      responses:
        '200':
          description: user created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserCreated'
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing user already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to add
        
  /user/inviteAssistant:
    post:
      tags:
        - doctors
      summary: invite an assistant to your office
      operationId: inviteAssistant
      description: |
            responds if userInvitation created
            Permissions
              1  "Calendario"
              2  "Pacientes"
              3  "Expediente"
              4  "Pagos"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteAssistant'

            example:
              email: 'will.alvarez@gmail.com'
              doctorId: 15
              OfficeId: 02
              permissions: [{id: 1},{id: 2}]

      responses:
        '200':
          description: Invite assistant to doctor's office
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'


  /Office/save:
    post:
      tags:
        - office
      summary: Create doctor's office
      operationId: createOffice
      description: "Method for create new doctor's office"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Office'

            example:
              email: cristof_tb2@hotmail.com
              name: consultorio1
              phone: '8441234567'
              hospital: hospital
              number: '222'
              address: direccion
              userId: 32
              lat: 12.12
              lng: 213.234
              startTime: '10:00'
              closeTime: '18:00'
              days:
                - 1
                - 2
                - 3
                - 4
                - 5
                - 6
              lunchStartTime: '13:00'
              lunchCloseTime: '14:00'


      responses:
        '200':
          description: Invite assistant to doctor's office
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /medicalAppointment/save:

    post:
      tags:
        - appointments
      summary: create user appointments
      operationId: createUserAppointments
      description: Create User Appointments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/saveAppointment'
            example:
              email: cristof_tb@hotmail.com
              doctorId: 99
              OfficeId: 32
              name: cristopher
              phone: '8441234567'
              date: '2018-11-16T15:31:46.437-06'

      responses:
        '200':
          description: responds with user appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing user already exists
  /patient/save:
    post:
      tags:
        - appointments
      summary: save general info about patient
      operationId: patientSave
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/savePatient'
            example:
              email: cristoftb@gmail.com
              name: Cristopher Torres
              cellphone: '1234567894'
              birthdate: '2018-11-16T15:31:46.437'
              gender: 1
              maritalStatus: 1
              weight: 70
              height: 170
              bloodType: 1
              bloodPressure: 10/10
              imageData:
                type: string
                format: base64
              doctor:
                id: 99
              Office:
                id: 32
              medicalAppointment:
                id: 7
      responses:
        '200':
          description: responds with user appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
components:
  schemas:
    UserShow:
      type: object
      properties:
        id:
          type: integer
          example: 99
        name:
          type: string
          example: 'Alejandro De Leon Lopez'
        email:
          type: string
          example: 'aledeleon222@hotmail.com'
        cellphone:
          type: string
          example: '8442590888'
        roleId:
          type: integer
          example: 1
        photo:
          type: string
          example: 'files/user/userdetails/99/'
        status:
          type: integer
          example: 1
        specialty:
          type: object
          properties:
            id:
              type: integer
              example: 11
            name:
              type: string
              example: 'Neurología'
        permissions:
          type: object
          description: |
            <br/>4 Pagos
            <br/>1 Calendario
            <br/>2 Pacientes
            <br/>3 Expediente
          properties:
            id:
              type: integer
              example: 3
            name:
              type: string
              example: 'Expediente'



    User:
      type: object
      required:
        - name
        - email
        - cellphone
        - password
        - imageData

      properties:
        password:
          type: string
          format: password

        name:
          type: string
          example: Will Alvarez
        email:
          type: string
          example: will.alvarez@gmail.com
        cellphone:
          type: string
          example: '8442614767'
          # changes
        imageData:
          type: string
        specialty:
          type: object
          properties:
            id:
              type: integer


    UserCreated:
      required:
        - name
        - password
        - email
        - cellphone
        - imageData
        - specialty
      properties:
        id:
          type: integer
          example: 14
        name:
          type: string
          example: Will Alvarez
        password:
          type: string
          example: '$2a$10$P.RAVEFnDOeP3bqON.W0IeRnGrx48B0RzqdBzICTjdDI7JLYydFce'
        email:
          type: string
          example: will.alvarez@gmail.com
        cellphone:
          type: string
          example: '8442614767'
          # changes
        roleId:
          type: string
          example: null
        photo:
          type: string
          example: 'files/user/userdetails/17/'
        status:
          type: integer
          example: 2
        confirmationCode:
          type: string
          example: '2e1cbd'
        createDate:
          type: string
          format: date-time
          example: null
        token:
          type: string
          example: null
        imageData:
          type: string
        specialty:
          type: object
          properties:
            id:
              type: integer
    Office:
      type: object
      required:
        - email
        - name
        - phone
        - address
        - userId
        - lat
        - lng
        - startTime
        - closeTime
        - days
        - lunchStartTime
        - lunchCloseTime


      properties:
        email:
          type: string
        userId:
          type: integer
        name:
          type: string
        phone:
          type: string
          format: phone
        hospital:
          type: string
        number:
          type: string
        address:
          type: string
        lat:
          type: number
        lng:
          type: number
        startTime:
          type: string
        closeTime:
          type: string
        days:
          type: array
          items:
            type: integer
        lunchStartTime:
          type: string
        lunchCloseTime:
          type: string

    InviteAssistant:
      type: object
      required:
        - email
        - doctorId
        - OfficeId
        - permissions
      properties:
        email:
          type: string
        doctorId:
          type: integer
        OfficeId:
          type: integer
        permissions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer




    Place:
      type: object
      required:
        - name
        - lat
        - lng
        - kind
      properties:
        kind:
          type: string
          enum: [consultorio, laboratorio, farmacia, hospital]
        name:
          type: string
        lat:
          type: string
        lng:
          type: string
    Appointment:
      type: object
      required:
        - kind
        - date
        - place
        - patient
        - doctor
        - price
      properties:
        kind:
          type: string
          enum: [consulta, intervención]
        date:
          type: string
          format: date-time
        place:

          $ref: '#/components/schemas/Place'
    AccountConfirmation:
      required:
        - email
        - code
      properties:
        email:
          type: string
          example: 'will.alvarez@gmail.com'
        code:
          type: string
          example: 'hxr1s9'
    saveAppointment:
      required:
        - email
        - doctorId
        - OfficeId
        - name
        - phone
        - date
      properties:
        email:
          type: string
          example: cristof_tb@hotmail.com
        doctorId:
          type: integer
          example: 99
        OfficeId:
          type: integer
          example: 32
        name:
          type: string
          example: cristopher
        phone:
          type: string
          example: '8441234567'
        date:
          type: string
          format: date-time
          example: '2018-11-16T15:31:46.437-06'

    savePatient:
      properties:
        email:
          type: string
          example: 'cristoftb@gmail.com'
        name:
          type: string
          example: 'Cristopher Torres'
        cellphone:
          type: string
          example: '1234567894'
        birthdate:
          type: string
          format: date-time
          example: '2018-11-16T15:31:46.437'
        gender:
          type: integer
          example: 1
        maritalStatus:
          type: integer
          example: 1
        weight:
          type: integer
          example: 70
        height:
          type: integer
          example: 170
        bloodType:
          type: integer
          example: 1
        bloodPressure:
          type: string
          example: '10/10'
        doctor:
          type: object
          properties:
            id:
              type: integer
              example: 99
        Office:
          type: object
          properties:
            id:
              type: integer
              example: 19
        medicalAppointment:
          type: object
          properties:
            id:
              type: integer
              example: 7


    AccountConfirmationAssistant:
      required:
        - email
        - code
        - password
        - name
        - imageData
      properties:
        email:
          type: string
          example: 'will.alvarez@gmail.com'
        code:
          type: string
          example: 'hxr1s9'
        password:
          type: string
          format: password
          example: '****'
        name:
          type: string
          example: 'William Alv'
        imageData:
          type: string
          format: base64

    AccountPasswordReset:
      required:
        - email
      properties:
        email:
          type: string
    AccountPasswordConfirmation:
      required:
        - oldPassword
        - newPassword
        - confirmPassword
        - id
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        confirmPassword:
          type: string
          format: password
        code:
          type: string

    AccountLogin:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: will.alvarez@gmail
        password:
          type: string
          format: password
    Doctor:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - specialty
          properties:
            specialty:
              type: object
              properties:
                id:
                  type: integer
    Assistant:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - doctorId
            - OfficeId
            - permissions
          properties:
            doctorId:
              type: integer
            OfficeId:
              type: integer


    AssistantInvite:
      type: object
      required:
        - email
        - doctorId
        - OfficeId


    Patient:
      allOf:     # Combines the BasicErrorModel and the inline model
        - $ref: '#/components/schemas/User'
        - type: object

          properties:
            age:
              type: integer
            bloodType:
              type: string
            bloodPressure:
              type: string
            weight:
              type: integer
            height:
              description: 'height in meters'
              type: integer
            address:
              type: string